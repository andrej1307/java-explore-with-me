{
  "info": {
    "_postman_id": "a7bb2177-ee2a-4f24-a50e-e58ca6eefa20",
    "name": "Test Explore With Me - Feature comments",
    "description": "Коллекция тестов API работы с комменариями событий.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "39468895"
  },
  "item": [
    {
      "name": "Добавление нового комментария к событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор, автор комментария\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        // устанавливаем в пути запроса идентификатор события\r",
              "        pm.collectionVariables.set(\"eid\", event.id)\r",
              "        // создаем объект автора комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set('uid', commentUser.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    // Генерируем случайный текст комментария\r",
              "    let comment;\r",
              "    try {\r",
              "        comment = rnd.getComment();\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    // формируем тело запроса\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(comment),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код 201 и данные в формате json\", function () {\r",
              "    pm.response.to.be.success;  // код ответа должен быть 'успешно'  \r",
              "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
              "    pm.response.to.be.json;     // тело ответа должно быть в формате JSON\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id события"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление пустого комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор, автор комментария\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        // устанавливаем в пути запроса идентификатор события\r",
              "        pm.collectionVariables.set(\"eid\", event.id)\r",
              "        // создаем объект автора комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set('uid', commentUser.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    // Генерируем случайный текст комментария\r",
              "\r",
              "    // формируем тело запроса\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify({text: \"\"}),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;  // код ответа должен быть 400\r",
              "    pm.response.to.be.withBody;    // ответ должен содержать тело\r",
              "    pm.response.to.be.json;        // тело ответа должно быть в формате JSON\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id события"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к неопубликованному событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор, автор комментария\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        // устанавливаем в пути запроса идентификатор события\r",
              "        pm.collectionVariables.set(\"eid\", event.id)\r",
              "        // создаем объект автора комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set('uid', commentUser.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    // Генерируем случайный текст комментария\r",
              "    let comment;\r",
              "    try {\r",
              "        comment = rnd.getComment();\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    // формируем тело запроса\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(comment),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код 403 и данные в формате json\", function () {\r",
              "    pm.response.to.be.forbidden;  // код ответа должен быть 403'  \r",
              "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
              "    pm.response.to.be.json;     // тело ответа должно быть в формате JSON\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id события"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к несуществующему событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор, автор комментария\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        // устанавливаем в пути запроса идентификатор события\r",
              "        pm.collectionVariables.set(\"eid\", 10000)\r",
              "        // создаем объект автора комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set('uid', commentUser.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    // Генерируем случайный текст комментария\r",
              "    let comment;\r",
              "    try {\r",
              "        comment = rnd.getComment();\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    // формируем тело запроса\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(comment),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound; // код ответа должен быть \r",
              "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
              "    pm.response.to.be.json;     // тело ответа должно быть в формате JSON\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id события"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Исправление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор, автор комментария\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        // создаем объект автора комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set('uid', commentUser.id);\r",
              "        // создаем новый коментарий\r",
              "        comment = await api.addComment(commentUser.id, event.id, rnd.getComment());\r",
              "        pm.collectionVariables.set('cmid', comment.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    // формируем тело запроса\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify({text: \"Исправленный текст комментария.\"}),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.success;  // код ответа должен быть 200\r",
              "    pm.response.to.be.withBody;    // ответ должен содержать тело\r",
              "    pm.response.to.be.json;        // тело ответа должно быть в формате JSON\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "commentId",
              "value": "{{cmid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Модерация комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор события, автор комментария\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        // устанавливаем идентификаторы в пути запроса\r",
              "        pm.collectionVariables.set('uid', user.id);\r",
              "        pm.collectionVariables.set(\"eid\", event.id)\r",
              "        // создаем объект автора комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        // создаем новый коментарий\r",
              "        comment = await api.addComment(commentUser.id, event.id, rnd.getComment());\r",
              "        // формируем тело запроса\r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify({commentIds: [comment.id],\r",
              "            state: \"APPROVED\"}),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;  // код ответа должен быть 200  \r",
              "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
              "    pm.response.to.be.json;     // тело ответа должно быть в формате JSON\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            },
            {
              "key": "eventId",
              "value": "{{eid}}",
              "description": "(Required) id события"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск комментариев пользователя",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор события, автор комментария, комментарии\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        // создаем объект автора комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        // устанавливаем идентификатор автора в пути запроса\r",
              "        pm.collectionVariables.set('uid', commentUser.id);\r",
              "        // создаем новые коментарии\r",
              "        comment1 = await api.addComment(commentUser.id, event.id, rnd.getComment());\r",
              "        comment2 = await api.addComment(commentUser.id, event.id, rnd.getComment());\r",
              "        // одобряем добавленные комментарии\r",
              "        modComment = await api.approvedComment(user.id, event.id, comment1.id);\r",
              "        modComment = await api.approvedComment(user.id, event.id, comment2.id);        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const body = pm.response.json();\r",
              "pm.test(\"Тело ответа должно быть массивом и колличество элементов больше 1\", function () {\r",
              "    pm.response.to.be.ok;  // код ответа должен быть 200  \r",
              "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
              "    pm.response.to.be.json;     // тело ответа должно быть в формате JSON\r",
              "    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
              "    pm.expect(body.length).to.be.gte(1); // длина массива должна быть больше 1\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск комментариев к заданному событию",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор события, автор комментария, комментарии\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        // устанавливаем идентификатор события в пути запроса\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        comment1 = await api.addComment(user.id, event.id, rnd.getComment());\r",
              "        modComment = await api.approvedComment(user.id, event.id, comment1.id);\r",
              "        // создаем объект автора Дополнительного комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        // устанавливаем идентификатор автора в пути запроса\r",
              "        pm.collectionVariables.set('uid', commentUser.id);\r",
              "        comment2 = await api.addComment(commentUser.id, event.id, rnd.getComment());\r",
              "        modComment = await api.approvedComment(user.id, event.id, comment2.id);        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const body = pm.response.json();\r",
              "pm.test(\"Тело ответа должно быть массивом и колличество элементов больше 1\", function () {\r",
              "    pm.response.to.be.ok;  // код ответа должен быть 200  \r",
              "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
              "    pm.response.to.be.json;     // тело ответа должно быть в формате JSON\r",
              "    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
              "    pm.expect(body.length).to.be.gte(1); // длина массива должна быть больше 1\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{baseUrl}}/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск комментария по идентификатору",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор события, автор комментария, комментарии\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
              "        modComment = await api.approvedComment(user.id, event.id, comment.id);\r",
              "        // устанавливаем идентификатор события в пути запроса\r",
              "        pm.collectionVariables.set('cmid', comment.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const body = pm.response.json();\r",
              "pm.test(\"Тело ответа должно быть в формате json\", function () {\r",
              "    pm.response.to.be.ok;  // код ответа должен быть 200  \r",
              "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
              "    pm.response.to.be.json;     // тело ответа должно быть в формате JSON\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Комментарий должны содержать поля: id, author, eventId, text, state\", function () {\r",
              "    pm.expect(target).to.have.property('id');\r",
              "    pm.expect(target).to.have.property('author');\r",
              "    pm.expect(target).to.have.property('eventId');\r",
              "    pm.expect(target).to.have.property('text');\r",
              "    pm.expect(target).to.have.property('state');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(pm.collectionVariables.get(\"cmid\"));\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{baseUrl}}/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "{{cmid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск комментария к событию по фильтру",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    // Подготовка данных: Событие, инициатор события, автор комментария, комментарии\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        // устанавливаем идентификатор события в пути запроса\r",
              "        pm.collectionVariables.set('eid', event.id);\r",
              "        comment1 = await api.addComment(user.id, event.id, rnd.getComment());\r",
              "        modComment = await api.approvedComment(user.id, event.id, comment1.id);\r",
              "        // создаем объект автора Дополнительного комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        comment2 = await api.addComment(commentUser.id, event.id, rnd.getComment());\r",
              "        modComment = await api.approvedComment(user.id, event.id, comment2.id);        \r",
              "        pm.request.removeQueryParams(['text', 'authorIds', 'state']);\r",
              "        pm.request.addQueryParams([`text=` + comment1.text, 'authorIds=' + comment1.author.id]);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "const body = pm.response.json();\r",
              "pm.test(\"Тело ответа должно быть в формате json\", function () {\r",
              "    pm.response.to.be.ok;  // код ответа должен быть 200  \r",
              "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
              "    pm.response.to.be.json;     // тело ответа должно быть в формате JSON\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Комментарий должны содержать поля: id, author, eventId, text, state\", function () {\r",
              "    pm.expect(target[0]).to.have.property('id');\r",
              "    pm.expect(target[0]).to.have.property('author');\r",
              "    pm.expect(target[0]).to.have.property('eventId');\r",
              "    pm.expect(target[0]).to.have.property('text');\r",
              "    pm.expect(target[0]).to.have.property('state');\r",
              "});\r",
              "\r",
              "pm.test(\"Должен быть найден только один комментарий по заданному фильтру\", function () {\r",
              "    pm.expect(target.length).to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{baseUrl}}/events/:eventId/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            ":eventId",
            "comments"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        // создаем объект автора комментария\r",
              "        const commentUser = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set('uid', commentUser.id);\r",
              "        // создаем новый коментарий\r",
              "        const comment = await api.addComment(commentUser.id, event.id, rnd.getComment());\r",
              "        pm.collectionVariables.set(\"cmid\", comment.id)\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            },
            {
              "key": "commentId",
              "value": "{{cmid}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {\r",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
          "        this.baseUrl = baseUrl;\r",
          "        this.pm = postman;\r",
          "        this._verbose = verbose;\r",
          "    }\r",
          "\r",
          "    async addUser(user, verbose=null) {\r",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCategory(category, verbose=null) {\r",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addEvent(userId, event, verbose=null) {\r",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addComment(userId, eventId, comment, verbose=null) {\r",
          "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", comment, \"Ошибка при добавлении нового комментария: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCompilation(compilation, verbose=null) {\r",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
          "    }\r",
          "\r",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async publishEvent(eventId, verbose=null) {\r",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
          "    }\r",
          "\r",
          "    async approvedComment(userId, eventId, commentId,  verbose=null) {\r",
          "        return this.patch(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", {commentIds: [commentId], state: \"APPROVED\"}, \"Ошибка при модерации комментария.\", verbose);\r",
          "    }\r",
          "    \r",
          "    async rejectEvent(eventId, verbose=null) {\r",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
          "    }\r",
          "\r",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCategory(catId, verbose=null) {\r",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findComment(commentId, verbose=null) {\r",
          "        return this.get('/comments/' + commentId, null, \"Ошибка при поиске комментария по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCompilation(compId, verbose=null) {\r",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findEvent(eventId, verbose=null) {\r",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findUser(userId, verbose=null) {\r",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
          "    }\r",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
          "        return new Promise((resolve, reject) => {\r",
          "            verbose = verbose == null ? this._verbose : verbose;\r",
          "            const request = {\r",
          "                url: this.baseUrl + path,\r",
          "                method: method,\r",
          "                body: body == null ? \"\" : JSON.stringify(body),\r",
          "                header: { \"Content-Type\": \"application/json\" },\r",
          "            };\r",
          "            if(verbose) {\r",
          "                console.log(\"Отправляю запрос: \", request);\r",
          "            }\r",
          "\r",
          "            try {\r",
          "                this.pm.sendRequest(request, (error, response) => {\r",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
          "                        let err = error ? error : JSON.stringify(response.json());\r",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
          "\r",
          "                        reject(new Error(errorText + err));\r",
          "                    }\r",
          "                    if(verbose) {\r",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
          "                    }\r",
          "                    if (response.stream.length === 0){\r",
          "                        reject(new Error('Отправлено пустое тело ответа'))\r",
          "                    }else{\r",
          "                        resolve(response.json());\r",
          "                    }\r",
          "                });\r",
          "                \r",
          "            } catch(err) {\r",
          "                if(verbose) {\r",
          "                    console.error(errorText, err);\r",
          "                }\r",
          "                return Promise.reject(err);\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "};\r",
          "\r",
          "RandomUtils = class {\r",
          "    constructor() {}\r",
          "\r",
          "    getUser() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getCategory() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getComment() {\r",
          "        return {\r",
          "            text: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getEvent(categoryId) {\r",
          "        return {\r",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
          "            category: categoryId,\r",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
          "            eventDate: this.getFutureDateTime(),\r",
          "            location: {\r",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
          "            },\r",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
          "        }\r",
          "    }\r",
          "\r",
          "    getCompilation(...eventIds) {\r",
          "        return {\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            events: eventIds\r",
          "        };\r",
          "    }\r",
          "\r",
          "\r",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
          "        let moment = require('moment');\r",
          "\r",
          "        let m = moment();\r",
          "        m.add(hourShift, 'hour');\r",
          "        m.add(minuteShift, 'minute');\r",
          "        m.add(yearShift, 'year');\r",
          "\r",
          "        return m.format('YYYY-MM-DD HH:mm:ss');\r",
          "    }\r",
          "\r",
          "    getWord(length = 1) {\r",
          "        let result = '';\r",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
          "        const charactersLength = characters.length;\r",
          "        let counter = 0;\r",
          "        while (counter < length) {\r",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
          "            counter += 1;\r",
          "        }\r",
          "        return result;\r",
          "    }\r",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "id",
      "value": "1"
    },
    {
      "key": "baseUrl",
      "value": "",
      "type": "default"
    },
    {
      "key": "uid",
      "value": ""
    },
    {
      "key": "eid",
      "value": ""
    },
    {
      "key": "cmid",
      "value": ""
    }
  ]
}