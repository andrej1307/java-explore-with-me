CREATE TABLE IF NOT EXISTS "categorys" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "name" VARCHAR(128)                           NOT NULL,
    CONSTRAINT pk_category PRIMARY KEY (id),
    CONSTRAINT UQ_CATEGORY UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS "users" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name  VARCHAR(128)                            NOT NULL,
    email VARCHAR(128)                            NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS "events" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "category_id" INTEGER,
    "user_id" INTEGER NOT NULL,
    "title" VARCHAR(128),
    "annotation" VARCHAR(256),
    "description" VARCHAR(256),
    "eventDate" TIMESTAMP WITHOUT TIME ZONE,
    "location_lat" FLOAT,
    "location_lon" FLOAT,
    "paid" BOOLEAN,
    "participantLimit" INTEGER,
    "requestModeration" BOOLEAN,
    CONSTRAINT pk_event PRIMARY KEY (id),
    CONSTRAINT fk_events_to_users FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_events_to_categorys FOREIGN KEY (category_id) REFERENCES categorys (id)
);

CREATE TABLE IF NOT EXISTS "requests" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "requester_id" INTEGER NOT NULL,
    "event_id" INTEGER NOT NULL,
    "status" VARCHAR(32),
    "created" TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_request PRIMARY KEY (id),
    CONSTRAINT fk_requests_to_users FOREIGN KEY (requester_id) REFERENCES users (id),
    CONSTRAINT fk_requests_to_events FOREIGN KEY (event_id) REFERENCES events (id)
);

CREATE TABLE IF NOT EXISTS "compilations" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "title" VARCHAR(128),
    "pinned" BOOLEAN,
    CONSTRAINT pk_compilation PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS "eventlinks" (
    "event_id" INTEGER NOT NULL,
    "compiation_id" INTEGER NOT NULL,
    CONSTRAINT pk_eventlinks PRIMARY KEY (event_id, compiation_id),
    CONSTRAINT fk_links_to_events FOREIGN KEY (event_id) REFERENCES events (id),
    CONSTRAINT fk_links_to_compilations FOREIGN KEY (compiation_id) REFERENCES compilations (id)
);
